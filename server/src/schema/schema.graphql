type Query {
  transactions (transactionsInput: TransactionsQueryInput!): [Transaction!]!
  totalTransactionsCount(accountId: ID, search: String, dateFrom: DateTime, dateTo: DateTime): Int!
  accounts (bankId: ID): [Account!]!
  banks: [Bank!]!
  categories: [Category!]!
}

input TransactionsQueryInput {
  cursorId: ID
  limit: Int
  sortBy: String
  sortOrder: Sort
  accountId: ID
  bankId: ID
  search: String
  dateFrom: DateTime
  dateTo: DateTime
}

type Transaction {
  id: ID!
  date: DateTime!
  amount: Float!
  reference: String!
  currency: Currency!
  account: Account
  category: Category
}

type Account {
  id: ID!
  name: String!
  bank: Bank
}

type Bank {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Category {
  id: ID!
  name: String!
  color: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type AddBankMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  bank: Bank
}

type AddCategoryMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  category: Category
}

type AddAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  account: Account
}

type AddTransactionMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  transaction: Transaction
}

type Mutation {
  addBank(name: String): AddBankMutationResponse
  addCategory(name: String, color: String): AddCategoryMutationResponse
  addAccount(name: String, bankId: ID): AddAccountMutationResponse
  addTransaction(amount: Float, reference: String, currency: Currency, account: ID, category: ID): AddTransactionMutationResponse
}

enum Currency {
  EUR
  USD
  GBP
}

enum Sort {
  asc
  desc
}

scalar DateTime
